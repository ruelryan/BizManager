/**
 * PayPal Webhook Endpoint Testing Script
 * This script tests the webhook endpoint directly to identify issues
 */

const WEBHOOK_URL = 'YOUR_SUPABASE_EDGE_FUNCTION_URL'; // Replace with your actual webhook URL

// Sample PayPal webhook event payloads for testing
const sampleEvents = {
  subscriptionCreated: {
    id: "WH-test-created-123",
    event_version: "1.0",
    create_time: new Date().toISOString(),
    resource_type: "subscription",
    event_type: "BILLING.SUBSCRIPTION.CREATED",
    summary: "Subscription created",
    resource: {
      id: "I-test-subscription-123",
      plan_id: "P-BIZMANAGER_STARTER",
      custom_id: "test-user-id-123", // Replace with actual user ID
      status: "APPROVAL_PENDING",
      create_time: new Date().toISOString(),
      billing_info: {
        outstanding_balance: {
          currency_code: "USD",
          value: "0.00"
        },
        next_billing_time: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
      }
    }
  },
  
  subscriptionActivated: {
    id: "WH-test-activated-456",
    event_version: "1.0",
    create_time: new Date().toISOString(),
    resource_type: "subscription",
    event_type: "BILLING.SUBSCRIPTION.ACTIVATED",
    summary: "Subscription activated",
    resource: {
      id: "I-test-subscription-123",
      plan_id: "P-BIZMANAGER_STARTER",
      custom_id: "test-user-id-123", // Replace with actual user ID
      status: "ACTIVE",
      start_time: new Date().toISOString(),
      billing_info: {
        outstanding_balance: {
          currency_code: "USD",
          value: "0.00"
        },
        next_billing_time: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        last_payment: {
          amount: {
            currency_code: "USD",
            value: "3.99"
          },
          time: new Date().toISOString()
        }
      }
    }
  }
};

// Sample PayPal headers (these would normally be generated by PayPal)
const sampleHeaders = {
  'Content-Type': 'application/json',
  'x-paypal-transmission-id': 'test-transmission-id',
  'x-paypal-cert-id': 'test-cert-id',
  'x-paypal-auth-algo': 'SHA256withRSA',
  'x-paypal-transmission-sig': 'test-signature',
  'x-paypal-transmission-time': new Date().toISOString()
};

async function testWebhookEndpoint(eventType, eventPayload) {
  console.log(`\n=== Testing ${eventType} ===`);
  
  try {
    console.log('Sending request to:', WEBHOOK_URL);
    console.log('Event payload:', JSON.stringify(eventPayload, null, 2));
    
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: sampleHeaders,
      body: JSON.stringify(eventPayload)
    });
    
    console.log('Response status:', response.status);
    console.log('Response headers:', Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    console.log('Response body:', responseText);
    
    if (response.ok) {
      console.log('✅ Webhook processed successfully');
    } else {
      console.error('❌ Webhook processing failed');
    }
    
    return {
      success: response.ok,
      status: response.status,
      response: responseText
    };
    
  } catch (error) {
    console.error('❌ Request failed:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

async function runTests() {
  console.log('PayPal Webhook Endpoint Testing');
  console.log('================================');
  
  if (WEBHOOK_URL === 'YOUR_SUPABASE_EDGE_FUNCTION_URL') {
    console.error('❌ Please update WEBHOOK_URL with your actual webhook endpoint');
    console.log('Your webhook URL should look like:');
    console.log('https://YOUR_PROJECT_ID.supabase.co/functions/v1/paypal-webhook-handler');
    return;
  }
  
  // Test endpoint accessibility
  console.log('\n1. Testing endpoint accessibility...');
  try {
    const response = await fetch(WEBHOOK_URL, { method: 'OPTIONS' });
    console.log('CORS preflight status:', response.status);
    if (response.ok) {
      console.log('✅ Endpoint is accessible');
    } else {
      console.log('⚠️ Endpoint accessibility issue');
    }
  } catch (error) {
    console.error('❌ Endpoint not accessible:', error.message);
  }
  
  // Test subscription created event
  const createdResult = await testWebhookEndpoint('SUBSCRIPTION_CREATED', sampleEvents.subscriptionCreated);
  
  // Wait a bit before next test
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Test subscription activated event
  const activatedResult = await testWebhookEndpoint('SUBSCRIPTION_ACTIVATED', sampleEvents.subscriptionActivated);
  
  // Summary
  console.log('\n=== Test Summary ===');
  console.log('Subscription Created:', createdResult.success ? '✅ PASS' : '❌ FAIL');
  console.log('Subscription Activated:', activatedResult.success ? '✅ PASS' : '❌ FAIL');
  
  if (!createdResult.success || !activatedResult.success) {
    console.log('\n=== Debugging Tips ===');
    console.log('1. Check Supabase Edge Functions logs');
    console.log('2. Verify environment variables in Supabase dashboard');
    console.log('3. Check database permissions and RLS policies');
    console.log('4. Ensure webhook URL is publicly accessible');
  }
}

// Instructions for manual testing
console.log('MANUAL TESTING INSTRUCTIONS:');
console.log('1. Update WEBHOOK_URL with your actual endpoint');
console.log('2. Update test-user-id-123 with a real user ID');
console.log('3. Run: node test-webhook-endpoint.js');
console.log('4. Check Supabase logs and database tables');

// Uncomment to run tests (after updating WEBHOOK_URL)
// runTests();